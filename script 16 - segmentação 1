import cv2
import numpy as np
import os
from tkinter import Tk, filedialog

def selecionar_imagens():
    Tk().withdraw()
    caminhos = filedialog.askopenfilenames(
        title="Selecione as imagens",
        filetypes=[("Imagens", "*.bmp;*.jpg;*.png")]
    )
    return list(caminhos)

def aplicar_filtro_por_cor(caminho):
    imagem = cv2.imread(caminho)
    if imagem is None:
        print(f"Erro ao carregar a imagem: {caminho}")
        return None

    # Converte para HSV
    hsv = cv2.cvtColor(imagem, cv2.COLOR_BGR2HSV)

    # Intervalos para vermelho (precisa de dois intervalos)
    vermelho_baixo = cv2.inRange(hsv, (0, 100, 100), (10, 255, 255))
    vermelho_alto = cv2.inRange(hsv, (160, 100, 100), (179, 255, 255))
    mascara_vermelho = cv2.bitwise_or(vermelho_baixo, vermelho_alto)

    # Intervalo para amarelo
    mascara_amarelo = cv2.inRange(hsv, (20, 100, 100), (35, 255, 255))

    # Combina as m√°scaras
    mascara_total = cv2.bitwise_or(mascara_vermelho, mascara_amarelo)

    # Encontra contornos
    contornos, _ = cv2.findContours(mascara_total, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    imagem_pintada = np.zeros_like(mascara_total)
    cv2.drawContours(imagem_pintada, contornos, -1, 255, thickness=cv2.FILLED)

    # FloodFill (opcional, pode ajudar a preencher partes desconectadas)
    imagem_flood = imagem_pintada.copy()
    altura, largura = imagem_flood.shape
    mascara_flood = np.zeros((altura + 2, largura + 2), np.uint8)

    for contorno in contornos:
        M = cv2.moments(contorno)
        if M['m00'] != 0:
            cx = int(M['m10'] / M['m00'])
            cy = int(M['m01'] / M['m00'])
            cv2.floodFill(imagem_flood, mascara_flood, (cx, cy), 255)

    return imagem_flood

def salvar_imagem(imagem, caminho_original, sufixo):
    pasta_saida = "imagens_processadas"
    os.makedirs(pasta_saida, exist_ok=True)
    nome_arquivo = os.path.basename(caminho_original)
    caminho_saida = os.path.join(pasta_saida, f"{sufixo}_{nome_arquivo}")
    cv2.imwrite(caminho_saida, imagem)
    print(f"Imagem salva em: {caminho_saida}")

# Processamento em lote
caminhos_imagens = selecionar_imagens()
for caminho in caminhos_imagens:
    resultado = aplicar_filtro_por_cor(caminho)
    if resultado is not None:
        salvar_imagem(resultado, caminho, "cor_preenchida")

cv2.destroyAllWindows()
